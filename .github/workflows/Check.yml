name: Check

on:
    workflow_dispatch:
    pull_request:
        branches: ["main"]

jobs:
    build-and-test:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: 9.0.x

            - name: Install dotnet-format
              shell: bash
              run: |
                  # —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ dotnet –¥–æ—Å—Ç—É–ø–µ–Ω
                  dotnet --info || true

                  # —É—Å—Ç–∞–Ω–æ–≤–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ (–ø–æ–ª–æ–∂–∏—Ç –±–∏–Ω–∞—Ä–Ω–∏–∫–∏ –≤ $HOME/.dotnet/tools)
                  dotnet tool install -g dotnet-format || true

                  # –¥–æ–±–∞–≤–∏–º –ø–∞–ø–∫—É —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –≤ PATH –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
                  echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

                  # –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                  command -v dotnet-format && dotnet-format --version || echo "dotnet-format not available yet"

            - name: Restore, build, and annotate errors
              continue-on-error: true
              shell: bash
              run: |
                  build_failed=false

                  # collect all csproj (supports spaces in paths)
                  mapfile -t projects < <(find . -name '*.csproj' -print0 | xargs -0 -n1 echo)

                  for project in "${projects[@]}"; do
                    echo "üîπ Restoring: $project"
                    dotnet restore "$project" || true

                    echo "üîπ Building: $project"
                    build_output=$(dotnet build "$project" --no-restore || true)

                    if [[ $build_output == *"error"* ]]; then
                      build_failed=true
                    fi

                    echo "$build_output" | awk '!seen[$0]++' | while read -r line; do
                      if [[ "$line" =~ ^(.*[a-zA-Z0-9_/.]+)\(([0-9]+),([0-9]+)\):\ error\ (.*)$ ]]; then
                        file="${BASH_REMATCH[1]}"
                        line_number="${BASH_REMATCH[2]}"
                        column_number="${BASH_REMATCH[3]}"
                        error_message="${BASH_REMATCH[4]}"
                        echo "::error file=$file,line=$line_number,col=$column_number::$error_message"
                      fi
                    done
                  done

                  echo "build_failed=$build_failed" >> $GITHUB_ENV
                  echo "$build_failed"

            - name: Fail if build errors found
              if: env.build_failed == 'true'
              continue-on-error: true
              run: |
                  echo "‚ùå Build failed due to errors."
                  exit 1

            - name: Run tests (if exist)
              continue-on-error: true
              shell: bash
              run: |
                  # find test projects by name containing test/tests (case-insensitive)
                  mapfile -t test_projects < <(find . -iname '*test*.csproj' -print0 | xargs -0 -n1 echo || true)

                  if [ ${#test_projects[@]} -eq 0 ]; then
                    echo "‚ÑπÔ∏è No test projects found. Skipping tests."
                    exit 0
                  fi

                  for test_project in "${test_projects[@]}"; do
                    echo "üîπ Running tests in $test_project"
                    dotnet test "$test_project" --no-build --verbosity normal || true
                  done

            - name: Install jq
              shell: bash
              run: |
                  # –ù–∞ ubuntu-latest sudo –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî —Å—Ç–∞–≤–∏–º jq –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ report.json
                  if ! command -v jq >/dev/null 2>&1; then
                    sudo apt-get update -y
                    sudo apt-get install -y jq
                  else
                    echo "jq already installed"
                  fi

            - name: Check formatting for all projects with annotations
              shell: bash
              run: |
                  # collect csproj (supports spaces)
                  mapfile -t projects < <(find . -name '*.csproj' -print0 | xargs -0 -n1 echo)

                  if [ ${#projects[@]} -eq 0 ]; then
                    echo "‚ÑπÔ∏è No .csproj files found ‚Äî skipping formatting checks."
                    exit 0
                  fi

                  any_failed=0

                  for proj in "${projects[@]}"; do
                    echo "üîπ Running dotnet format on: $proj"
                    report="$(mktemp --suffix=.json)" || report="$(mktemp)"
                    out="$(mktemp)" || out="$(mktemp)"

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ JSON-–æ—Ç—á—ë—Ç, –∏ stdout (—á—Ç–æ–±—ã –∏–º–µ—Ç—å fallback)
                    dotnet format "$proj" --verify-no-changes --report "$report" >"$out" 2>&1 || true

                    # 1) –ï—Å–ª–∏ report —Å–æ–¥–µ—Ä–∂–∏—Ç diagnostics ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ (–±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω–æ)
                    if [ -s "$report" ]; then
                      count=$(jq '(.Diagnostics // []) | length' "$report" 2>/dev/null || echo 0)
                      if [ "$count" -gt 0 ]; then
                        any_failed=1
                        echo "‚ùå Found $count formatting issues in $proj (from report)"
                        jq -r --arg proj "$proj" '
                          (.Diagnostics // [])[] |
                          ( (.Location.FilePath // .FilePath // $proj) | sub("^\\./";"") ) as $file |
                          ( .Location.StartLine // 1 ) as $line |
                          ( .Id // "" ) as $id |
                          ( .Message // "" ) as $msg |
                          "::warning file=\($file),line=\($line),col=1::\($id): \($msg)"
                        ' "$report"
                      else
                        # report –ø—É—Å—Ç–æ–π ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∏–∂–µ –∞–Ω–∞–ª–∏–∑ stdout
                        :
                      fi
                    fi

                    # 2) –ï—Å–ª–∏ report –Ω–µ –¥–∞–ª diagnostics, –ø–∞—Ä—Å–∏–º stdout (fallback)
                    if [ "$any_failed" -eq 0 ] || ! [ -s "$report" ]; then
                      if grep -Ei ".*\([0-9]+,[0-9]+\):.*(warning)" "$out" >/dev/null 2>&1; then
                        any_failed=1
                        echo "‚ùå Found formatting issues in $proj (from stdout)"
                        grep -Ei ".*\([0-9]+,[0-9]+\):.*(warning)" "$out" | while IFS= read -r line; do
                          if [[ "$line" =~ ^(Warning:)?(.*)\(([0-9]+),([0-9]+)\):[[:space:]]*(warning)[[:space:]]*([A-Z0-9_]*)?:?[[:space:]]*(.*)$ ]]; then
                              file="${BASH_REMATCH[2]}"
                              line_number="${BASH_REMATCH[3]}"
                              col_number="${BASH_REMATCH[4]}"
                              severity="${BASH_REMATCH[5]}"
                              code="${BASH_REMATCH[6]}"
                              msg="${BASH_REMATCH[7]}"
                              file="${file#./}"
                              echo "::warning file=$file,line=$line_number,col=$col_number::${code}: ${msg}"
                          else
                              # fallback
                              echo "::warning file=$proj,line=1,col=1::${line}"
                          fi
                        done
                      else
                        # –µ—Å–ª–∏ –∏ report –ø—É—Å—Ç, –∏ stdout –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç—Ä–æ–∫
                        if ! [ -s "$report" ]; then
                          echo "‚úÖ No formatting issues in $proj"
                        fi
                      fi
                    fi

                    rm -f "$report" "$out"
                  done

                  if [ "$any_failed" -eq 1 ]; then
                    echo "‚ùå Formatting issues detected in one or more projects."
                    exit 1
                  else
                    echo "‚úÖ All projects passed format check."
                    exit 0
                  fi
